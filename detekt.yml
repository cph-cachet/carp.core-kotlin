complexity:
  LongParameterList:
    excludes: ['**/commonTest/**', '**/jvmTest/**', '**/jsTest/**', '**/test/**']
  TooManyFunctions:
    ignorePrivate: true

formatting:
  Filename:
    active: false
  MaximumLineLength:
    active: false
  NoConsecutiveBlankLines:
    active: false
  NoLineBreakAfterElse:
    active: false
  NoWildcardImports:
    active: false
  SpacingAroundCurly:
    active: false
  SpacingAroundKeyword:
    active: false
  SpacingAroundParens:
    active: false

naming:
  MemberNameEqualsClassName:
    active: false

performance:
  ArrayPrimitive:
    active: false

potential-bugs:
  EqualsAlwaysReturnsTrueOrFalse:
    active: false
  UnsafeCallOnNullableType:
    active: false

style:
  EqualsNullCall:
    active: false
  ForbiddenComment:
    active: false
  LoopWithTooManyJumpStatements:
    active: false
  MaxLineLength:
    active: false
  MayBeConst:
    active: false
  ProtectedMemberInFinalClass:
    active: false
  ReturnCount:
    active: false
  ThrowsCount:
    active: false
  UnnecessaryInheritance:
    active: false
  UnusedPrivateClass:
    active: false
  WildcardImport:
    # TODO: Consider deactivating this. The advantages of forcing individual types to be imported are limited.
    #       Namespaces are supposed to be cohesive sets of objects, thus importing them as a group makes sense.
    excludes: ''
    excludeImports: ['kotlin.reflect.*', 'kotlin.test.*']

verify-implementation:
  DataClass:
    active: true
    # TODO: These need to be excluded because base class sources can't be analyzed. Can we include them in the classpath?
    #   Alternatively, this new feature could help: https://github.com/cph-cachet/detekt-verify-implementation/issues/20
    excludes: &verify-implementation-excludes
        - '**/carp/detekt/**'
        - '**/carp/common/*'
        - '**/carp/common/data/CarpDataTypes.kt'
        - '**/carp/common/data/input/CarpInputDataTypes.kt'
        - '**/carp/common/data/input/CustomInput.kt'
        - '**/carp/common/data/input/InputDataTypeList.kt'
        - '**/carp/common/data/input/InputDataTypeListTest.kt'
        - '**/carp/common/serialization/**'
        - '**/carp/common/users/ParticipantAttributeTest.kt'
        - '**/carp/protocols/domain/sampling/DataTypeSamplingScheme.kt'
        - '**/carp/test/serialization/ConcreteTypesSerializationTest.kt'

        # TODO: enums may be valid for `DataClass`. At least, the following comply with the expectations.
        - '**/carp/common/data/input/Sex.kt'

        # TODO: these are the exact classes we are trying to check! Only the inner classes and serializers should be ignored.
        - '**/carp/protocols/domain/devices/BLEHeartRateSensor.kt'
        - '**/carp/protocols/domain/devices/UnknownDeviceSerializers.kt'
        - '**/carp/protocols/domain/sampling/UnknownSamplingConfigurationSerializers.kt'
        - '**/carp/protocols/domain/tasks/UnknownTaskSerializers.kt'
        - '**/carp/protocols/domain/triggers/UnknownTriggerSerializers.kt'
        - '**/carp/protocols/domain/tasks/measures/PhoneSensorMeasure.kt'
    annotationClass: "dk.cachet.carp.common.ImplementAsDataClass"
  Immutable:
    active: true
    excludes: *verify-implementation-excludes
    annotationClass: "dk.cachet.carp.common.Immutable"
    assumeImmutable: [
      'dk.cachet.carp.common.DateTime',
      'dk.cachet.carp.common.data.input.CustomInput.T',
      'kotlinx.serialization.json.Json'
    ]

carp:
  CurlyBracesOnSeparateLine:
    active: true
  SpacingInParentheses:
    active: true
