def commonModule = subprojects.find { it.name == 'carp.common' }
def coreModules = subprojects.findAll { it.name.endsWith( '.core' ) }


// Load plugin dependencies.
buildscript {
    dependencies {
        // Kotlin plugins.
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlinVersion"

        // JS plugins.
        classpath "com.moowork.gradle:gradle-node-plugin:$nodePluginVersion"
    }

    repositories {
        jcenter()

        // Additional Kotlin plugin repos.
        maven { url 'https://kotlin.bintray.com/kotlinx' }

        // Additional JS plugin repos.
        maven { url "https://plugins.gradle.org/m2/" }
    }
}


// Configure all subprojects as testable Kotlin multiplatform projects.
subprojects {
    repositories {
        jcenter()
    }

    // HACK: Workaround for bug in `gradle-node-plugin`: https://github.com/srs/gradle-node-plugin/issues/301
    repositories.whenObjectAdded {
        if (it instanceof IvyArtifactRepository) {
            metadataSources {
                artifact()
            }
        }
    }

    // Specify platforms and test frameworks to use.
    apply plugin: 'kotlin-multiplatform'
    kotlin {
        jvm {
            compilations.main.kotlinOptions.jvmTarget = jvmTarget
            compilations.test.kotlinOptions.jvmTarget = jvmTarget
        }
        js {
            compilations.main.kotlinOptions {
                metaInfo = true
                sourceMap = true
                moduleKind = 'umd'
                main = "noCall"
                sourceMapEmbedSources = 'always'
            }
            compilations.test.kotlinOptions {
                metaInfo = true
                sourceMap = true
                moduleKind = 'umd'
                main = "call"
                sourceMapEmbedSources = 'always'
            }
        }

        sourceSets {
            commonMain {
                dependencies {
                    implementation kotlin('stdlib-common')
                }
            }
            commonTest {
                dependencies {
                    implementation kotlin('test-common')
                    implementation kotlin('test-annotations-common')
                }
            }
            jvmMain {
                dependencies {
                    implementation kotlin('stdlib-jdk8')
                }
            }
            jvmTest {
                dependencies {
                    implementation kotlin('test')
                    implementation kotlin('test-junit5')
                    implementation "org.junit.jupiter:junit-jupiter-api:$jUnit5Version"
                    runtimeOnly "org.junit.jupiter:junit-jupiter-engine:$jUnit5Version"
                }
            }
            jsMain {
                dependencies {
                    implementation kotlin('stdlib-js')
                }
            }
            jsTest {
                dependencies {
                    implementation kotlin('test-js')
                }
            }
        }
    }

    // JVM test configuration.
    jvmTest {
        useJUnitPlatform()
    }

    // JS test configuration.
    // This is adapted from kotlinx-io's build file; I do not fully understand this configuration:
    // https://stackoverflow.com/a/55244288/590790
    apply plugin: 'com.moowork.node'
    task copyJsDependencies(type: Copy, dependsOn: compileTestKotlinJs) {
        from compileKotlinJs.destinationDir
        into "${buildDir}/node_modules"

        def configuration = configurations.jsTestRuntimeClasspath
        from(files {
            configuration.collect { File file ->
                file.name.endsWith(".jar")
                        ? zipTree(file.absolutePath).matching {
                    include '*.js'
                    include '*.js.map' }
                        : files()
            }
        }.builtBy(configuration))
    }
    node {
        version = nodeVersion
        download = true
    }
    task installMocha(type: NpmTask) {
        args = ['install', 'mocha']
    }
    task runMocha(type: NodeTask, dependsOn: [installMocha, compileTestKotlinJs, copyJsDependencies]) {
        script = file('node_modules/mocha/bin/mocha')
        args = [compileTestKotlinJs.outputFile]
    }
    jsTest.dependsOn runMocha
}


// Add common dependencies:
// - `carp.test` for testing
// - `kotlinx.serialization` to serialize domain models
// - reflection is used to reinforce correct implementation of domain objects at runtime
configure( coreModules + commonModule ) {
    repositories {
        maven { url 'https://kotlin.bintray.com/kotlinx' }
    }

    buildscript {
        repositories {
            jcenter()
        }

        dependencies {
            classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlinVersion"
        }
    }

    apply plugin: 'kotlinx-serialization'
    kotlin {
        sourceSets {
            commonMain {
                dependencies {
                    implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:$serializationVersion"
                }
            }
            commonTest {
                dependencies {
                    implementation project(':carp.test')
                }
            }
            jvmMain {
                dependencies {
                    implementation kotlin('reflect')
                    implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$serializationVersion"
                }
            }
            jsMain {
                dependencies {
                    implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-js:$serializationVersion"
                }
            }
        }
    }
}


// Add dependencies of all core modules on `carp.common`.
configure( coreModules ) {
    kotlin {
        sourceSets {
            commonMain {
                dependencies {
                    implementation project(':carp.common')
                }
            }
        }
    }
}