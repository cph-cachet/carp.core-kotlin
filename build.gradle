def commonModule = subprojects.find { it.name == 'carp.common' }
def coreModules = subprojects.findAll { it.name.endsWith( '.core' ) }


// Load plugin dependencies.
buildscript {
    ext {
        // Version used for all submodule artifacts.
        // Snapshot publishing changes (or adds) the suffix after '-' with 'SNAPSHOT' prior to publishing.
        // The 'publishSigned' task publishes to SonaType's staging repo and 'publishSnapshot' instantly uploads to the snapshots repo.
        globalVersion = '1.0.0-alpha.6'

        versions = [
            // Kotlin multiplatform versions.
            kotlin:'1.3.41',
            serialization:'0.11.1',
            coroutines:'1.2.2',

            // JVM versions.
            jvmTarget:'1.6',
            jUnit5:'5.5.1',
            dokkaPlugin:'0.9.18',

            // JS versions.
            nodePlugin:'1.3.1',
            node:'12.9.1',
            mocha:'6.2.0'
        ]
    }

    dependencies {
        // Kotlin plugins.
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}"
        classpath "org.jetbrains.kotlin:kotlin-serialization:${versions.kotlin}"

        // JS plugins.
        classpath "com.moowork.gradle:gradle-node-plugin:${versions.nodePlugin}"

        // JVM plugins.
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:${versions.dokkaPlugin}"
    }

    repositories {
        jcenter()

        // Additional Kotlin plugin repos.
        maven { url 'https://kotlin.bintray.com/kotlinx' }
    }
}


// Configure all subprojects as testable, publishable, Kotlin multiplatform projects.
subprojects {
    version = globalVersion

    repositories {
        jcenter()
    }

    // HACK: Workaround for bug in `gradle-node-plugin`: https://github.com/srs/gradle-node-plugin/issues/301
    repositories.whenObjectAdded {
        if (it instanceof IvyArtifactRepository) {
            metadataSources {
                artifact()
            }
        }
    }

    // Specify platforms and test frameworks to use.
    apply plugin: 'kotlin-multiplatform'
    kotlin {
        jvm {
            compilations.main.kotlinOptions.jvmTarget = versions.jvmTarget
            compilations.test.kotlinOptions.jvmTarget = versions.jvmTarget
        }
        js {
            compilations.main.kotlinOptions {
                metaInfo = true
                sourceMap = true
                moduleKind = 'umd'
                main = "noCall"
                sourceMapEmbedSources = 'always'
            }
            compilations.test.kotlinOptions {
                metaInfo = true
                sourceMap = true
                moduleKind = 'umd'
                main = "call"
                sourceMapEmbedSources = 'always'
            }
        }

        sourceSets {
            commonMain {
                dependencies {
                    implementation kotlin('stdlib-common')
                }
            }
            commonTest {
                dependencies {
                    implementation kotlin('test-common')
                    implementation kotlin('test-annotations-common')
                }
            }
            jvmMain {
                dependencies {
                    implementation kotlin('stdlib-jdk8')
                }
            }
            jvmTest {
                dependencies {
                    implementation kotlin('test')
                    implementation kotlin('test-junit5')
                    implementation "org.junit.jupiter:junit-jupiter-api:${versions.jUnit5}"
                    runtimeOnly "org.junit.jupiter:junit-jupiter-engine:${versions.jUnit5}"
                }
            }
            jsMain {
                dependencies {
                    implementation kotlin('stdlib-js')
                }
            }
            jsTest {
                dependencies {
                    implementation kotlin('test-js')
                }
            }
        }
    }

    // JVM test configuration.
    jvmTest {
        useJUnitPlatform()
    }

    // JS test configuration.
    // This is adapted from kotlinx-io's build file; I do not fully understand this configuration:
    // https://stackoverflow.com/a/55244288/590790
    apply plugin: 'com.moowork.node'
    task copyJsDependencies(type: Copy, dependsOn: compileTestKotlinJs) {
        from compileKotlinJs.destinationDir
        into "${buildDir}/node_modules"

        def configuration = configurations.jsTestRuntimeClasspath
        from(files {
            configuration.collect { File file ->
                file.name.endsWith(".jar")
                        ? zipTree(file.absolutePath).matching {
                    include '*.js'
                    include '*.js.map' }
                        : files()
            }
        }.builtBy(configuration))
    }
    node {
        version = versions.node
        download = true
    }
    task installMocha(type: NpmTask) {
        args = ['install', "mocha@${versions.mocha}"]
    }
    task runMocha(type: NodeTask, dependsOn: [installMocha, compileTestKotlinJs, copyJsDependencies]) {
        script = file('node_modules/mocha/bin/mocha')
        args = [compileTestKotlinJs.outputFile]
    }
    jsTest.dependsOn runMocha

    // Publish configuration.
    // For signing and publishing to work, a 'publish.properties' file needs to be added to the root containing:
    // The OpenPGP signature credentials to sign all artifacts:
    // > signing.keyId=<LAST 8 SYMBOLS OF KEY ID>
    // > signing.password=<SECRET>
    // > signing.secretKeyRingFile=<ABSOLUTE PATH TO THE SECRET KEY RING FILE WITH PRIVATE KEY>
    // A username and password to upload artifacts to the Sonatype repository:
    // > repository.username=<SONATYPE USERNAME>
    // > repository.password=<SONATYPE PASSWORD>
    apply plugin: 'maven-publish'
    apply plugin: 'org.jetbrains.dokka'
    dokka {
        outputFormat = 'html'
        outputDirectory = "$buildDir/javadoc"
    }
    task javadocJar(type: Jar) {
        group JavaBasePlugin.DOCUMENTATION_GROUP
        description 'Create javadoc jar using Dokka'
        archiveClassifier = "javadoc"
        from dokka
    }
    def publishProperties = new Properties()
    def publishPropertiesFile = rootProject.file('publish.properties')
    if (publishPropertiesFile.exists())
    {
        publishProperties.load(new FileInputStream(publishPropertiesFile))
    }
    publishing {
        publications {
            all {
                pom {
                    url = 'https://github.com/cph-cachet/carp.core-kotlin'
                    licenses {
                        license {
                            name = 'MIT License'
                            url = 'https://github.com/cph-cachet/carp.core-kotlin/blob/master/LICENSE.md'
                        }
                    }
                    developers {
                        developer {
                            id = 'whathecode'
                            name = 'Steven Jeuris'
                            email = 'steven.jeuris@gmail.com'
                            organization = 'CACHET'
                            organizationUrl = 'http://www.cachet.dk/'
                        }
                    }
                    scm {
                        connection = 'scm:git:git://github.com/cph-cachet/carp.core-kotlin.git'
                        developerConnection = 'scm:git:ssh://github.com:cph-cachet/carp.core-kotlin.git'
                        url = 'https://github.com/cph-cachet/carp.core-kotlin'
                    }
                }
            }
            jvm {
                artifact javadocJar
            }
        }
        repositories {
            maven {
                name "local"
                url "$buildDir/repository"
            }
            maven {
                name = "sonatype"
                url = 'https://oss.sonatype.org/service/local/staging/deploy/maven2' // Staging repo.
                credentials {
                    username = publishProperties['repository.username']
                    password = publishProperties['repository.password']
                }
            }
        }
    }
    // Configure the 'sign' task to sign all files part of the maven package.
    apply plugin: 'signing'
    signing {
        sign publishing.publications.jvm
        sign publishing.publications.js
        sign publishing.publications.metadata
        sign publishing.publications.kotlinMultiplatform
    }
    task publishSigned {
        doFirst {
            allprojects { ext."signing.keyId" = publishProperties['signing.keyId'] }
            allprojects { ext."signing.password" = publishProperties['signing.password'] }
            allprojects { ext."signing.secretKeyRingFile" = publishProperties['signing.secretKeyRingFile'] }
        }
    }
    publishSigned.finalizedBy publish
    task publishSnapshot {
        doFirst {
            // Since project dependencies trigger publications of other projects, immediately modify versions of all subprojects.
            rootProject.subprojects.each { project ->
                def versionSplit = project.version.split('-')
                def snapshotVersion = "${versionSplit[0]}-SNAPSHOT"
                project.version = snapshotVersion

                // Override 'maven-publish' publication versions and change staging repo URL to snapshot repo.
                project.publishing.publications.all { version = version }
                project.publishing.repositories.sonatype.url = 'https://oss.sonatype.org/content/repositories/snapshots'
            }
        }
    }
    publishSnapshot.finalizedBy publishSigned
}

// Add common dependencies:
// - `carp.test` for testing
// - `kotlinx.serialization` to serialize domain models
// - reflection is used to reinforce correct implementation of domain objects at runtime
configure( coreModules + commonModule ) {
    repositories {
        maven { url 'https://kotlin.bintray.com/kotlinx' }
    }

    buildscript {
        repositories {
            jcenter()
        }

        dependencies {
            classpath "org.jetbrains.kotlin:kotlin-serialization:${versions.kotlin}"
        }
    }

    apply plugin: 'kotlinx-serialization'
    kotlin {
        sourceSets {
            commonMain {
                dependencies {
                    implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:${versions.serialization}"
                }
            }
            commonTest {
                dependencies {
                    implementation project(':carp.test')
                }
            }
            jvmMain {
                dependencies {
                    implementation kotlin('reflect')
                    implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:${versions.serialization}"
                }
            }
            jsMain {
                dependencies {
                    implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-js:${versions.serialization}"
                }
            }
        }
    }
}


// Add dependencies of all core modules on `carp.common`.
configure( coreModules ) {
    kotlin {
        sourceSets {
            commonMain {
                dependencies {
                    api project(':carp.common')
                }
            }
        }
    }
}


// HACK: Dokka currently does not work for multiplatform projects.
// The following configuration is a workaround to configure Dokka for JVM solely:
// https://discuss.kotlinlang.org/t/how-to-configure-dokka-for-kotlin-multiplatform/9834
configure( subprojects ) {
    dokka {
        kotlinTasks { [] }
        // Dokka fails to retrieve sources from multiplatform tasks. Setting this as empty avoids exceptions.
        sourceRoot {
            path = kotlin.sourceSets.commonMain.kotlin.srcDirs[0] // There is only one source dir.
            platforms = ["Common"]
        }
        sourceRoot {
            path = kotlin.sourceSets.jvmMain.kotlin.srcDirs[0] // There is only one source dir.
            platforms = ["JVM"]
        }
    }
}
// HACK: Manually add source dependencies of core modules to 'common' so that Dokka can resolve them.
configure( coreModules ) {
    dokka {
        sourceRoot {
            path = project(':carp.common').kotlin.sourceSets.commonMain.kotlin.srcDirs[0] // There is only one source dir.
            platforms = ["Common"]
        }
        sourceRoot {
            path = project(':carp.common').kotlin.sourceSets.jvmMain.kotlin.srcDirs[0] // There is only one source dir.
            platforms = ["JVM"]
        }
    }
}