buildscript {
    ext {
        kotlinVersion = '1.3.21'
        serializationVersion = '0.10.0'
        jUnit5Version = '5.4.0'
        nodePluginVersion = '1.2.0'
        nodeVersion = '8.9.4'
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlinVersion"
        classpath "com.moowork.gradle:gradle-node-plugin:$nodePluginVersion"
    }

    repositories {
        jcenter()
        maven { url 'https://kotlin.bintray.com/kotlinx' }
        maven { url "https://plugins.gradle.org/m2/" }
    }
}

// Common configuration for all subprojects.
subprojects {
    buildscript {
        repositories {
            jcenter()
            maven { url 'https://kotlin.bintray.com/kotlinx' }
        }

        dependencies {
            classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
            classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlinVersion"
        }
    }

    repositories {
        jcenter()
        maven { url 'https://kotlin.bintray.com/kotlinx' }
    }
}


// Common configuration for all JavaScript modules of the multiplatform projects.
configure( subprojects.findAll { it.name.endsWith( '-js' ) } ) {
    buildscript {
        ext.nodeVersion = '8.9.4'

        repositories {
            maven { url "https://plugins.gradle.org/m2/" }
        }

        dependencies {
            classpath "com.moowork.gradle:gradle-node-plugin:$nodePluginVersion"
        }
    }
}


// Common configuration for all JVM modules of the multiplatform projects.
configure( subprojects.findAll { it.name.endsWith( '-jvm' ) } ) {
    ext.jvmTarget = '1.8'
    ext.junitVersion = '5.3.1'

    buildscript {
        dependencies {
            classpath "org.jetbrains.dokka:dokka-gradle-plugin:0.9.17"
        }
    }
}

// Common configuration for all projects with new Kotlin multiplatform plugin.
configure( subprojects.findAll { it.name == 'carp.common' || it.name == 'carp.deployment.core' } ) {
    apply plugin: 'kotlin-multiplatform'
    apply plugin: 'kotlinx-serialization'

    kotlin {
        jvm()
        js()

        sourceSets {
            commonMain {
                dependencies {
                    implementation kotlin('stdlib-common')
                    implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:$serializationVersion"
                }
            }
            commonTest {
                dependencies {
                    implementation project(path: ':carp.test', configuration: 'archives')
                    implementation kotlin('test-common')
                    implementation kotlin('test-annotations-common')
                }
            }
            jvmMain {
                dependencies {
                    implementation kotlin('stdlib-jdk8')
                    implementation kotlin('reflect')
                    implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$serializationVersion"
                }
            }
            jvmTest {
                dependencies {
                    implementation project(path: ':carp.test', configuration: 'archives')
                    implementation kotlin('test')
                    implementation kotlin('test-junit5')
                    implementation "org.junit.jupiter:junit-jupiter-api:$jUnit5Version"
                    runtimeOnly "org.junit.jupiter:junit-jupiter-engine:$jUnit5Version"
                }
            }
            jsMain {
                dependencies {
                    implementation kotlin('stdlib-js')
                    implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-js:$serializationVersion"
                }
            }
            jsTest {
                dependencies {
                    implementation project(path: ':carp.test', configuration: 'jsDefault')
                    implementation kotlin('test-js')
                }
            }
        }
    }

    // JVM configuration.
    jvmTest {
        useJUnitPlatform()
    }

    // JS configuration (adapted from kotlinx-io's build file)
    // I do not fully understand this configuration: https://stackoverflow.com/a/55244288/590790
    apply plugin: 'com.moowork.node'
    compileKotlinJs.configure {
        kotlinOptions {
            metaInfo = true
            sourceMap = true
            moduleKind = 'umd'
            main = "noCall"
            sourceMapEmbedSources = 'always'
        }
    }
    compileTestKotlinJs.configure {
        kotlinOptions {
            metaInfo = true
            sourceMap = true
            moduleKind = 'umd'
            main = "call"
            sourceMapEmbedSources = 'always'
        }
    }
    task copyJsDependencies(type: Copy, dependsOn: compileTestKotlinJs) {
        from compileKotlinJs.destinationDir
        into "${buildDir}/node_modules"

        def configuration = configurations.jsTestRuntimeClasspath
        from(files {
            configuration.collect { File file ->
                file.name.endsWith(".jar")
                    ? zipTree(file.absolutePath).matching {
                        include '*.js'
                        include '*.js.map' }
                    : files()
            }
        }.builtBy(configuration))
    }
    node {
        version = nodeVersion
        download = true
    }
    task installMocha(type: NpmTask) {
        args = ['install', 'mocha']
    }
    task runMocha(type: NodeTask, dependsOn: [installMocha, compileTestKotlinJs, copyJsDependencies]) {
        script = file('node_modules/mocha/bin/mocha')
        args = [compileTestKotlinJs.outputFile]
    }
    jsTest.dependsOn runMocha
}