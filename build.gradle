// Load plugin dependencies and initialize build variables.
buildscript {
    ext {
        // Version used for submodule artifacts.
        // Snapshot publishing changes (or adds) the suffix after '-' with 'SNAPSHOT' prior to publishing.
        globalVersion = '1.1.1'
        clientsVersion = '1.1.1-alpha.1' // The clients subsystem is still expected to change drastically.

        versions = [
            // Kotlin multiplatform versions.
            kotlin:'1.8.0-RC2',
            serialization:'1.4.1',
            coroutines:'1.6.0',
            datetime:'0.3.2',

            // JVM versions.
            jvmTarget:'1.8',
            dokkaPlugin:'1.6.10',
            reflections:'0.10.2',

            // JS versions.
            nodePlugin:'3.2.1',
            bigJs:'6.1.1',

            // DevOps versions.
            detektPlugin:'1.20.0-RC2',
            detektVerifyImplementation:'1.2.2',
            nexusPublishPlugin:'1.1.0',
            apacheCommons:'2.11.0'
        ]

        commonModule = subprojects.find { it.name == 'carp.common' }
        coreModules = subprojects.findAll { it.name.endsWith( '.core' ) }
        devOpsModules = subprojects.findAll { it.name == 'carp.detekt' || it.name == 'rpc' }
    }

    dependencies {
        // Kotlin plugins.
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}"
        classpath "org.jetbrains.kotlin:kotlin-serialization:${versions.kotlin}"

        // JS plugins.
        classpath "com.github.node-gradle:gradle-node-plugin:${versions.nodePlugin}"

        // JVM plugins.
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:${versions.dokkaPlugin}"

        // DevOps plugins.
        classpath "io.gitlab.arturbosch.detekt:detekt-gradle-plugin:${versions.detektPlugin}"
        classpath "io.github.gradle-nexus:publish-plugin:${versions.nexusPublishPlugin}"
    }

    repositories {
        mavenCentral()
        gradlePluginPortal()
    }
}

// Load dependent properties.
def publishProperties = new Properties()
def publishPropertiesFile = rootProject.file('publish.properties')
if (publishPropertiesFile.exists())
{
    publishProperties.load(new FileInputStream(publishPropertiesFile))
}

// Configure all subprojects as testable, publishable, Kotlin multiplatform projects.
// A `kotlinx.serialization` dependency is added to serialize domain models.
// A `kotlinx-datetime` dependency is added to be able to store dates in domain models.
configure( subprojects - devOpsModules ) {
    version = globalVersion

    // Specify platforms and test frameworks to use.
    apply plugin: 'kotlin-multiplatform'
    apply plugin: 'kotlinx-serialization'
    kotlin {
        jvm {
            compilations.main.kotlinOptions.jvmTarget = versions.jvmTarget
            compilations.test.kotlinOptions.jvmTarget = versions.jvmTarget

            testRuns["test"].executionTask.configure {
                useJUnitPlatform()
            }
        }
        js(LEGACY) {
            binaries.executable()
            browser()
        }

        sourceSets {
            commonMain {
                dependencies {
                    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:${versions.serialization}"
                    api "org.jetbrains.kotlinx:kotlinx-datetime:${versions.datetime}"
                }
            }
            commonTest {
                dependencies {
                    implementation kotlin('test')
                    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:${versions.coroutines}"
                }
            }
            jvmTest {
                dependencies {
                    implementation kotlin('reflect')
                    implementation "org.reflections:reflections:${versions.reflections}"
                }
            }

            all {
                def isTestSourceSet = it.name.endsWith('Test')

                languageSettings {
                    // We do not mind being early adopters of Jetbrains APIs likely to change in the future.
                    optIn('kotlin.RequiresOptIn')
                    optIn('kotlin.time.ExperimentalTime')
                    if (isTestSourceSet)
                    {
                        optIn('kotlinx.coroutines.ExperimentalCoroutinesApi')
                    }
                }
            }
        }
    }

    // Treat compilation warning as errors for all compilation targets.
    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
        kotlinOptions { allWarningsAsErrors = true }
    }

    // Publish configuration.
    // For signing and publishing to work, a 'publish.properties' file needs to be added to the root containing:
    // The OpenPGP credentials to sign all artifacts:
    // > signing.keyFile=<ABSOLUTE PATH TO THE ASCII-ARMORED KEY FILE>
    // > signing.password=<SECRET>
    // A username and password to upload artifacts to the Sonatype repository:
    // > repository.username=<SONATYPE USERNAME>
    // > repository.password=<SONATYPE PASSWORD>
    apply plugin: 'maven-publish'
    apply plugin: 'signing'
    apply plugin: 'org.jetbrains.dokka'
    task dokkaJvmJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
        dokkaSourceSets {
            register("jvm") {
                platform.set(org.jetbrains.dokka.Platform.jvm)
                sourceRoots.from(kotlin.sourceSets.getByName("jvmMain").kotlin.srcDirs)
            }
        }
    }
    task javadocJar(type: Jar) {
        group JavaBasePlugin.DOCUMENTATION_GROUP
        description 'Create javadoc jar using Dokka'
        archiveClassifier = "javadoc"
        from dokkaJvmJavadoc
    }
    publishing {
        publications {
            all {
                pom {
                    url = 'https://github.com/cph-cachet/carp.core-kotlin'
                    licenses {
                        license {
                            name = 'MIT License'
                            url = 'https://github.com/cph-cachet/carp.core-kotlin/blob/master/LICENSE.md'
                        }
                    }
                    developers {
                        developer {
                            id = 'whathecode'
                            name = 'Steven Jeuris'
                            email = 'steven.jeuris@gmail.com'
                            organization = 'CACHET'
                            organizationUrl = 'http://www.cachet.dk/'
                        }
                    }
                    scm {
                        connection = 'scm:git:git://github.com/cph-cachet/carp.core-kotlin.git'
                        developerConnection = 'scm:git:ssh://github.com:cph-cachet/carp.core-kotlin.git'
                        url = 'https://github.com/cph-cachet/carp.core-kotlin'
                    }
                }
            }
            jvm {
                artifact javadocJar
            }
        }
        repositories {
            maven {
                name "local"
                url "$buildDir/repository"
            }
        }
    }
    signing {
        def signingKeyFile = publishProperties['signing.keyFile']
        if (signingKeyFile != null) {
            def signingKey = new File(signingKeyFile).text
            def signingPassword = publishProperties['signing.password']
            useInMemoryPgpKeys(signingKey, signingPassword)
            sign publishing.publications
        }
    }
}

// Sonatype Nexus publication.
apply plugin: 'io.github.gradle-nexus.publish-plugin'
group = "dk.cachet.carp"
version = globalVersion
nexusPublishing {
    repositories {
        sonatype {
            username = publishProperties['repository.username']
            password = publishProperties['repository.password']
        }
    }
}
task setSnapshotVersion {
    doFirst {
        def versionSplit = globalVersion.split('-')
        def snapshotVersion = "${versionSplit[0]}-SNAPSHOT"
        version = snapshotVersion

        (rootProject.subprojects - devOpsModules).each { project ->
            project.version = snapshotVersion
        }
    }
}

// TypeScript ambient declaration verification.
def typescriptFolder = 'typescript-declarations'
apply plugin: 'com.github.node-gradle.node'
task setupTsProject(type: NpmTask) {
    workingDir = file(typescriptFolder)
    args = ['install']
}
task copyTestJsSources(type: Copy, dependsOn: setupTsProject) {
    // Make sure no old imported packages are left behind.
    def importedPackages = file("$rootDir/build/js/packages_imported")
    if (importedPackages.exists()) importedPackages.eachFile { it.delete() }

    // Compile all subprojects which compile to JS.
    // TODO: Can the compiled sources be copied from the tasks of which we want to test the output directly?
    //  We only need main sources of coreModules and commonModules since these are the only ones tested.
    //  But, only adding dependencies on those triggers warnings since other outputs exist in `/build//js/packages`.
    def projects = subprojects - devOpsModules
    projects.each {
        def project = it.name
        dependsOn("$project:jsBrowserDistribution")
        dependsOn("$project:compileTestKotlinJs")
    }

    // Copy compiled sources and dependencies to test project node_modules.
    from "$rootDir/build/js/packages"
    exclude '**/node_modules/**'
    from(importedPackages) {
        eachFile {
            def path = it.path
            if (path == ".visited") return // We don't need this file.

            // Remove intermediate version directory: e.g. "kotlin/1.5.10/kotlin.js"
            it.path = path.replaceFirst(/\d+\.\d+.\d+\//, "")
        }
    }
    into "./$typescriptFolder/node_modules"
}
task compileTs(type: NpmTask, dependsOn: copyTestJsSources) {
    workingDir = file(typescriptFolder)
    args = ['run', 'tsc']
}
task verifyTsDeclarations(type: NodeTask, dependsOn: compileTs) {
    script = file("${typescriptFolder}/node_modules/mocha/bin/mocha")
    execOverrides {
        it.workingDir = typescriptFolder
    }
    args = [
        '--require', 'ts-node/register',
        '--require', 'jsdom-global/register',
        './tests/**/*.ts'
    ]
}

// Add `carp.test` helpers.
configure( coreModules + commonModule ) {
    kotlin {
        sourceSets {
            commonTest {
                dependencies {
                    implementation project(':carp.test')
                }
            }
        }
    }
}


// Add dependencies of all core modules on `carp.common`.
configure( coreModules ) {
    kotlin {
        sourceSets {
            commonMain {
                dependencies {
                    api project(':carp.common')
                }
            }
            commonTest {
                dependencies {
                    implementation project(':carp.common.test')
                }
            }
        }
    }
}


// Add code analysis.
configure( rootProject )
{
    apply plugin: 'io.gitlab.arturbosch.detekt'
    detekt {
        dependencies {
            detektPlugins "io.gitlab.arturbosch.detekt:detekt-formatting:${versions.detektPlugin}"
            detektPlugins project(":carp.detekt") // Add custom project-specific rules.
            detektPlugins "dk.cachet.detekt.extensions:detekt-verify-implementation:${versions.detektVerifyImplementation}"
        }
    }
    task detektPasses(type: io.gitlab.arturbosch.detekt.Detekt) {
        source = fileTree("$rootDir")
        {
            include('**/src/**')
            exclude('**/node_modules/**', '**/resources/**')
        }
        config.from("$rootDir/detekt.yml")
        buildUponDefaultConfig = true
        ignoreFailures = false
        def classPaths = project.configurations.getByName("detekt")
        def multiplatformModules = coreModules + commonModule
        multiplatformModules.each { classPaths += it.configurations.getByName("jvmCompileClasspath") }
        classpath.setFrom(classPaths)
    }
    tasks.detekt.jvmTarget = "1.8"
    tasks.detekt.dependsOn ":carp.detekt:assemble" // Ensure 'carp.detekt' is built prior to running code analysis.
}
