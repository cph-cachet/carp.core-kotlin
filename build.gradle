def commonModule = subprojects.find { it.name == 'carp.common' }
def coreModules = subprojects.findAll { it.name.endsWith( '.core' ) }
def detektModule = subprojects.find { it.name == 'carp.detekt' }


// Load plugin dependencies.
buildscript {
    ext {
        // Version used for all submodule artifacts.
        // Snapshot publishing changes (or adds) the suffix after '-' with 'SNAPSHOT' prior to publishing.
        // The 'publishSigned' task publishes to SonaType's staging repo and 'publishSnapshot' instantly uploads to the snapshots repo.
        globalVersion = '1.0.0-alpha.12'

        versions = [
            // Kotlin multiplatform versions.
            kotlin:'1.3.61',
            serialization:'0.14.0',
            coroutines:'1.3.3',

            // JVM versions.
            jvmTarget:'1.6',
            jUnit5:'5.5.2',
            dokkaPlugin:'0.9.18',

            // JS versions.
            nodePlugin:'2.2.0',
            node:'13.6.0',
            mocha:'7.0.0',

            // DevOps versions.
            detektPlugin:'1.5.1',
            nexusReleasePlugin:'0.21.2'
        ]
    }

    dependencies {
        // Kotlin plugins.
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}"
        classpath "org.jetbrains.kotlin:kotlin-serialization:${versions.kotlin}"

        // JS plugins.
        classpath "com.github.node-gradle:gradle-node-plugin:${versions.nodePlugin}"

        // JVM plugins.
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:${versions.dokkaPlugin}"

        // DevOps plugins.
        classpath "io.gitlab.arturbosch.detekt:detekt-gradle-plugin:${versions.detektPlugin}"
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:${versions.nexusReleasePlugin}"
    }

    repositories {
        jcenter()

        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
}

// Load dependent properties.
def publishProperties = new Properties()
def publishPropertiesFile = rootProject.file('publish.properties')
if (publishPropertiesFile.exists())
{
    publishProperties.load(new FileInputStream(publishPropertiesFile))
}

// Configure all subprojects as testable, publishable, Kotlin multiplatform projects.
// A `kotlinx.serialization` dependency is added to serialize domain models.
configure( subprojects - detektModule ) {
    version = globalVersion

    repositories {
        jcenter()
    }

    // Specify platforms and test frameworks to use.
    apply plugin: 'kotlin-multiplatform'
    apply plugin: 'kotlinx-serialization'
    kotlin {
        jvm {
            compilations.main.kotlinOptions.jvmTarget = versions.jvmTarget
            compilations.test.kotlinOptions.jvmTarget = versions.jvmTarget
        }
        js {
            compilations.main.kotlinOptions {
                metaInfo = true
                sourceMap = true
                moduleKind = 'umd'
                main = "noCall"
                sourceMapEmbedSources = 'always'
            }
            compilations.test.kotlinOptions {
                metaInfo = true
                sourceMap = true
                moduleKind = 'umd'
                main = "call"
                sourceMapEmbedSources = 'always'
            }
        }

        sourceSets {
            commonMain {
                dependencies {
                    implementation kotlin('stdlib-common')
                    implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:${versions.serialization}"
                }
            }
            commonTest {
                dependencies {
                    implementation kotlin('test-common')
                    implementation kotlin('test-annotations-common')
                }
            }
            jvmMain {
                dependencies {
                    implementation kotlin('stdlib-jdk8')
                    implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:${versions.serialization}"
                }
            }
            jvmTest {
                dependencies {
                    implementation kotlin('test')
                    implementation kotlin('test-junit5')
                    implementation "org.junit.jupiter:junit-jupiter-api:${versions.jUnit5}"
                    runtimeOnly "org.junit.jupiter:junit-jupiter-engine:${versions.jUnit5}"
                }
            }
            jsMain {
                dependencies {
                    implementation kotlin('stdlib-js')
                    implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-js:${versions.serialization}"
                }
            }
            jsTest {
                dependencies {
                    implementation kotlin('test-js')
                }
            }
        }
    }

    // JVM test configuration.
    jvmTest {
        useJUnitPlatform()
    }

    // JS test configuration.
    // This is adapted from kotlinx-io's build file; I do not fully understand this configuration:
    // https://stackoverflow.com/a/55244288/590790
    apply plugin: 'com.github.node-gradle.node'
    task copyJsDependencies(type: Copy, dependsOn: compileTestKotlinJs) {
        from compileKotlinJs.destinationDir
        into "${buildDir}/node_modules"

        def configuration = configurations.jsTestRuntimeClasspath
        from(files {
            configuration.collect { File file ->
                file.name.endsWith(".jar")
                        ? zipTree(file.absolutePath).matching {
                    include '*.js'
                    include '*.js.map' }
                        : files()
            }
        }.builtBy(configuration))
    }
    node {
        version = versions.node
        download = true
    }
    task installMocha(type: NpmTask) {
        args = ['install', "mocha@${versions.mocha}"]
    }
    task runMocha(type: NodeTask, dependsOn: [installMocha, compileTestKotlinJs, copyJsDependencies]) {
        script = file('node_modules/mocha/bin/mocha')
        args = [compileTestKotlinJs.outputFile]
    }
    jsTest.dependsOn runMocha

    // Add code analysis.
    apply plugin: 'io.gitlab.arturbosch.detekt'
    detekt {
        input = files("$projectDir/src/")
        config = files("$rootDir/detekt.yml")
        ignoreFailures = true

        dependencies {
            detektPlugins "io.gitlab.arturbosch.detekt:detekt-formatting:${versions.detektPlugin}"
            detektPlugins project(":carp.detekt") // Add custom project-specific rules.
        }
    }
    task detektPasses(type: io.gitlab.arturbosch.detekt.Detekt) {
        source = files("$projectDir/src/")
        config.from("$rootDir/detekt.yml")
        ignoreFailures = false
    }
    tasks.detekt.dependsOn ":carp.detekt:assemble" // Ensure 'carp.detekt' is build prior to running code analysis.

    // Publish configuration.
    // For signing and publishing to work, a 'publish.properties' file needs to be added to the root containing:
    // The OpenPGP credentials to sign all artifacts:
    // > signing.keyFile=<ABSOLUTE PATH TO THE ASCII-ARMORED KEY FILE>
    // > signing.password=<SECRET>
    // A username and password to upload artifacts to the Sonatype repository:
    // > repository.username=<SONATYPE USERNAME>
    // > repository.password=<SONATYPE PASSWORD>
    apply plugin: 'maven-publish'
    apply plugin: 'org.jetbrains.dokka'
    dokka {
        outputFormat = 'html'
        outputDirectory = "$buildDir/javadoc"
    }
    task javadocJar(type: Jar) {
        group JavaBasePlugin.DOCUMENTATION_GROUP
        description 'Create javadoc jar using Dokka'
        archiveClassifier = "javadoc"
        from dokka
    }
    publishing {
        publications {
            all {
                pom {
                    url = 'https://github.com/cph-cachet/carp.core-kotlin'
                    licenses {
                        license {
                            name = 'MIT License'
                            url = 'https://github.com/cph-cachet/carp.core-kotlin/blob/master/LICENSE.md'
                        }
                    }
                    developers {
                        developer {
                            id = 'whathecode'
                            name = 'Steven Jeuris'
                            email = 'steven.jeuris@gmail.com'
                            organization = 'CACHET'
                            organizationUrl = 'http://www.cachet.dk/'
                        }
                    }
                    scm {
                        connection = 'scm:git:git://github.com/cph-cachet/carp.core-kotlin.git'
                        developerConnection = 'scm:git:ssh://github.com:cph-cachet/carp.core-kotlin.git'
                        url = 'https://github.com/cph-cachet/carp.core-kotlin'
                    }
                }
            }
            jvm {
                artifact javadocJar
            }
        }
        repositories {
            maven {
                name "local"
                url "$buildDir/repository"
            }
            maven {
                name = "sonatype"
                url = 'https://oss.sonatype.org/service/local/staging/deploy/maven2' // Staging repo.
                credentials {
                    username = publishProperties['repository.username']
                    password = publishProperties['repository.password']
                }
            }
        }
    }
    // Configure the 'sign' task to sign all files part of the maven package.
    apply plugin: 'signing'
    signing {
        sign publishing.publications.jvm
        sign publishing.publications.js
        sign publishing.publications.metadata
        sign publishing.publications.kotlinMultiplatform
    }
    task publishSigned {
        doFirst {
            def signingKey = new File(publishProperties['signing.keyFile']).text
            def signingPassword = publishProperties['signing.password']
            signing.useInMemoryPgpKeys(signingKey, signingPassword)
        }
    }
    publishSigned.finalizedBy publish
    task publishSnapshot {
        doFirst {
            // Since project dependencies trigger publications of other projects, immediately modify versions of all subprojects.
            (rootProject.subprojects - detektModule).each { project ->
                def versionSplit = project.version.split('-')
                def snapshotVersion = "${versionSplit[0]}-SNAPSHOT"
                project.version = snapshotVersion

                // Override 'maven-publish' publication versions and change staging repo URL to snapshot repo.
                project.publishing.publications.all { version = version }
                project.publishing.repositories.sonatype.url = 'https://oss.sonatype.org/content/repositories/snapshots'
            }
        }
    }
    publishSnapshot.finalizedBy publishSigned
}
// Add 'closeAndReleaseRepository' task to close and release uploads to Sonatype Nexus Repository after 'publishSigned'.
apply plugin: 'io.codearte.nexus-staging'
nexusStaging {
    packageGroup = 'dk.cachet.carp'
    numberOfRetries = 30
    username = publishProperties['repository.username']
    password = publishProperties['repository.password']
}

// TypeScript ambient declaration verification.
def typescriptFolder = 'typescript-declarations'
apply plugin: 'com.github.node-gradle.node'
task setupTsProject(type: NpmTask) {
    workingDir = file(typescriptFolder)
    args = ['install']
}
task copyTestJsSources(type: Copy, dependsOn: setupTsProject) {
    // First compile all subprojects for which TypeScript declarations are defined.
    def projects = coreModules + commonModule
    projects.each { dependsOn("${it.name}:compileKotlinJs") }

    projects.each {
        // Copy JS sources into ...
        def configuration = it.configurations.jsTestRuntimeClasspath
        from(files {
            configuration.collect { File file ->
                file.name.endsWith(".jar")
                        ? zipTree(file.absolutePath).matching {
                    include '*.js'
                    include '*.js.map' }
                        : files()
            }
        }.builtBy(configuration))

        // ... 'node_modules' so that test can retrieve dependencies.
        into "./${typescriptFolder}/node_modules"
    }
}
task verifyTsDeclarations(type: NodeTask, dependsOn: copyTestJsSources) {
    script = file("${typescriptFolder}/node_modules/mocha/bin/mocha")
    execOverrides {
        it.workingDir = typescriptFolder
    }
    args = ['--require', 'ts-node/register', './tests/**/*.ts']
}

// Add common dependencies:
// - `carp.test` for testing
// - reflection is used to reinforce correct implementation of domain objects at runtime
configure( coreModules + commonModule ) {
    buildscript {
        repositories {
            jcenter()
        }

        dependencies {
            classpath "org.jetbrains.kotlin:kotlin-serialization:${versions.kotlin}"
        }
    }

    kotlin {
        sourceSets {
            commonTest {
                dependencies {
                    implementation project(':carp.test')
                }
            }
            jvmMain {
                dependencies {
                    implementation kotlin('reflect')
                }
            }
        }
    }
}


// Add dependencies of all core modules on `carp.common`.
configure( coreModules ) {
    kotlin {
        sourceSets {
            commonMain {
                dependencies {
                    api project(':carp.common')
                }
            }
        }
    }
}


// HACK: Dokka currently does not work for multiplatform projects.
// The following configuration is a workaround to configure Dokka for JVM solely:
// https://discuss.kotlinlang.org/t/how-to-configure-dokka-for-kotlin-multiplatform/9834
configure( subprojects - detektModule ) {
    dokka {
        kotlinTasks { [] }
        // Dokka fails to retrieve sources from multiplatform tasks. Setting this as empty avoids exceptions.
        sourceRoot {
            path = kotlin.sourceSets.commonMain.kotlin.srcDirs[0] // There is only one source dir.
            platforms = ["Common"]
        }
        sourceRoot {
            path = kotlin.sourceSets.jvmMain.kotlin.srcDirs[0] // There is only one source dir.
            platforms = ["JVM"]
        }
    }
}
// HACK: Manually add source dependencies of core modules to 'common' so that Dokka can resolve them.
configure( coreModules ) {
    dokka {
        sourceRoot {
            path = project(':carp.common').kotlin.sourceSets.commonMain.kotlin.srcDirs[0] // There is only one source dir.
            platforms = ["Common"]
        }
        sourceRoot {
            path = project(':carp.common').kotlin.sourceSets.jvmMain.kotlin.srcDirs[0] // There is only one source dir.
            platforms = ["JVM"]
        }
    }
}